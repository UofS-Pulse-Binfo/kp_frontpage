<?php
/**
 * @file
 * The main code for KP Frontpage.
 */

// Field bundle and info implementation of this module.
module_load_include('inc', 'kp_frontpage', 'includes/TripalFields/kp_frontpage.fields');


/**
 * Implements hook_menu().
 */
function kp_frontpage_menu() {
  $items = array();

  // DATA SUMMARY:

  // Main menu items for phenotypes: shows a beanplot -select trait and project.
  $items['kp_frontpage/experiments'] = array(
    'page callback' => 'kp_frontpage_experiments_json',
    'access arguments' => array('access kp_frontpage experiments'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function kp_frontpage_permission() {
  return array(
    // Access kp_frontpage experiments.
    'access kp_frontpage experiments' => array(
      'title' => t('Access KP Frontpage Experiments'),
    ),
  );
}

/**
 * Implements hook_preprocess_page().
 */
function kptheme_preprocess_page(&$vars, $hook) {
  // Embed style, JS file, prepare preprocess vars and site stats,
  // only when it is the frontpage.

  if (drupal_is_front_page()) {
    $vars['path_host'] = $GLOBALS['base_url'];

    $path = drupal_get_path('module', 'kp_frontpage');
    drupal_add_css($path . '/kp_frontpage.css');
    drupal_add_js ($path . '/js/kp_frontpage.js', array('scope' => 'footer'));

    $vars['path_images'] = $vars['path_host'] . '/' . $path . '/images/';

    // Stats about data.
    $sql = "SELECT * FROM {kp_frontpage_stats}";
    $result = chado_query($sql);
    $arr_stats_bar = array();

    foreach($result as $stat) {
      // Bar chart.
      $arr_stats_bar[$stat->type] = array(
        'short_value' => kp_frontpage_shortval($stat->count),
        'long_value'  => number_format($stat->count),
      );
    }

    $vars['data_stats'] = $arr_stats_bar;

    // Project summary section.
    // Fetch all genus in projectprop table used to create
    // genus association per project but limit to only the projects that have
    // been promoted to Frontpage.
    $genus_term_id = variable_get('kp_frontpage_genus');
    $highlighted_term_id = variable_get('kp_frontpage_highlighted');

    $sql = "SELECT TRIM(value) FROM {projectprop} WHERE type_id = :genus AND
      project_id IN (SELECT project_id FROM {projectprop} WHERE type_id = :highlighted)
      GROUP BY value ORDER BY value ASC";
    $result = chado_query($sql, array(':genus' => $genus_term_id, ':highlighted' => $highlighted_term_id))
      ->fetchAllKeyed(0, 0);

    $vars['promoted_genus'] = $result;

    // Path to request experiments selected to be promoted.
    // @see hook_menu().
    $path = $vars['path_host'] . '/kp_frontpage/experiments/';
    drupal_add_js(array('kp_frontpage' => array('experiment' => $path)), 'setting');
  }
}

/**
 * Implements hook_contextual_links_view_alter().
 * Credits: https://www.drupal.org/forum/support/post-installation/2011-01-26/turn-off-contextual-links-in-d7.
 */
function kp_frontpage_contextual_links_view_alter(&$element, $items) {
  // Disable contextual links on views as it messes up markup.
  // For example: the link uses ul in the news section which uses ul as well
  // and trying to find the actual number of li in news includes the li in contextual links.
  if (isset($element['#element']['#views_contextual_links_info'])) {
    unset($element['#links']);
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function kp_frontpage_theme_registry_alter(&$theme_registry) {

  // Defined path to the current module.
  $module_path = drupal_get_path('module', 'kp_frontpage') . '/templates';

  // Find all .tpl.php files in this module's folder recursively.
  $template_file_objects = drupal_find_theme_templates($theme_registry, '.tpl.php', $module_path);

  // Iterate through all found template file objects.
  foreach ($template_file_objects as $key => $template_file_object) {

    // If the template has not already been overridden by a theme.
    if (!isset($theme_registry[$key]['theme path']) || !preg_match('#/themes/#', $theme_registry[$key]['theme path'])) {
      // Alter the theme path and template elements.
      $theme_registry[$key]['theme path'] = $module_path;
      $theme_registry[$key] = array_merge($theme_registry[$key], $template_file_object);
      $theme_registry[$key]['type'] = 'module';
    }
  }
}

/**
 * Implementation of hook_views_api()
 */
function kp_frontpage_views_api() {
  return array('api' => 3.0);
}

/**
 * Implements hook_node_info().
 */
function kp_frontpage_node_info() {

  $content_type = array(
    // Machine name.
    'kp_frontpage_cms' => array(
      // Human-readable name.
      'name' => t('KP Frontpage Content'),
      // Description.
      'description' => t('Manage KP frontpage content.'),
      // Title.
      'has_title' => TRUE,
      'title_label' => t('Content Title:'),
      // Base name for implementation. Usually the module name.
      'base' => 'kp_frontpage',
      // Disable option to let administrators change the machine
      // name of this content type.
      'locked' => TRUE,
    )
  );

  return $content_type;
}

/**
 * Implements hook_form().
 */
function kp_frontpage_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Shortens a number in K/M/B.
 *
 * @param $value
 *   An integer containing the number to be formatted.
 *
 * @return string
 *   Shortened result.
 */
function kp_frontpage_shortval($value) {
  if ($value < 1000) {
    // Hundred and less.
    $value = $value;
  }
  else if ($value < 1000000) {
    // Thousand.
    $value = round($value / 1000, 0) . 'K';
  }
  else if ($value < 1000000000) {
    // Million.
    $value = round($value / 1000000, 0) . 'M';
  }
  else {
    // Billion.
    $value = round($value / 1000000000, 0) . 'B';
  }

  return $value;
}

/**
 * Get experiments promoted to frontpage.
 *
 * @param $genus
 *   Get a set of projects promoted to frontpage based on genus.
 * @param $project_id
 *   In a genus, get a specific project.
 *
 * @return json
 *   JSON object.
 */
function kp_frontpage_experiments_json($genus, $project_id = null) {
  if (isset($genus) && strlen($genus) <= 15) {
    // Get genus system variable.
    $genus_term_id = variable_get('kp_frontpage_genus');
    $highlighted_term_id = variable_get('kp_frontpage_highlighted');
    $project_json = array();

    $logos_bundle = variable_get('kp_frontpage_logos_bundle');
    $table_logos  = 'field_funding_organization_logos';

    // SQL to fetch funders logo.
    $sql_project = "SELECT project.project_id, name, description
      FROM {project} LEFT JOIN {projectprop} AS genus USING(project_id)
        LEFT JOIN {projectprop} AS highlighted USING(project_id)
      WHERE
        genus.type_id = :term_genus AND genus.value = :genus AND
        highlighted.type_id = :term_highlighted AND highlighted.value = '1' %s
      ORDER BY highlighted.value DESC";

    $sql_logos   = "SELECT %s_value FROM %s
      WHERE entity_id = (SELECT entity_id FROM chado_%s WHERE record_id = :project_id LIMIT 1)";

    // Text limit (# words) used to summarize project description.
    $limit_text = 60;

    if ($project_id == null) {
      // Fetch all project promotd to frontpage in a genus.
      $project = chado_query(sprintf($sql_project, ''),
        array(':term_genus' => $genus_term_id, ':genus' => $genus, ':term_highlighted' => $highlighted_term_id));

      if ($project->rowCount() > 0) {
        $j = 0;
        foreach($project as $i => $p) {
          $name = htmlentities($p->name);
          $project_json[$j][] = ['id' => $p->project_id, 'genus' => $genus, 'name' => $name];
          if (($i+1) % 3 == 0) $j++;
        }
      }
      else {
        return 0;
      }
    }
    else {
      // An experiment record.
      $project_id = (int)$project_id;

      if (is_int($project_id) && $project_id > 0) {
        // Fetch a specific project in a genus.
        $project = chado_query(sprintf($sql_project, 'AND project_id = :project_id'),
          array(':term_genus' => $genus_term_id, ':genus' => $genus,
                ':term_highlighted' => $highlighted_term_id, ':project_id' => $project_id));

        if ($project->rowCount() > 0) {
          $p = $project->fetchObject();

          $name = htmlentities($p->name);
          preg_match_all('/<img[^>]+>/', $p->description, $images);

          // Decide which image. At this point there could be images
          // but only use the image tagged (class) kp-frontpage-logo as the logo
          // image, otherwise.
          $images = reset($images);
          foreach($images as $i => $img) {
            if (strpos($img, 'kp-frontpage-logo') !== FALSE) {
              $index = $i;
              break;
            }
          }

          // Project logo.
          $logo = (isset($images[ $index ])) ? $images[ $index ] : $name[0];

          $d = trim(html_entity_decode(strip_tags($p->description)));
          $ellipsis = (str_word_count($d) == $limit_text) ? '' : '...';
          $description = preg_replace('/((\w+\W*){' . $limit_text . '}(\w+))(.*)/', '${1}', $d) . $ellipsis;

          $result = chado_query(sprintf($sql_logos, $table_logos, 'field_data_' . $table_logos, $logos_bundle),
            array(':project_id' => $p->project_id));

          $funder_logo = ($result->rowCount() > 0) ? $result->fetchField() : '';

          // Link.
          $entity = chado_get_record_entity_by_table('project', $p->project_id);
          $entity_id = 'bio_data/' . $entity;

          $project_json = [
            'id'          => $p->project_id, // Project id number.
            'entityId'    => $entity_id,     // Entity id number.
            'name'        => $name,          // Project name.
            'description' => $description,   // Description.
            'projectLogo' => $logo,          // Project logo.
            'funderLogo'  => $funder_logo    // Funders logo.
          ];
        }
        else {
          return 0;
        }
      }
      else {
        // Not valid project id.
        return 0;
      }
    }
  }

  drupal_json_output($project_json);
}
