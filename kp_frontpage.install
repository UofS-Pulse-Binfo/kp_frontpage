<?php
/**
 * @file
 * Specific to the installation of the module.
 */

/**
 * Implements hook_enable().
 */
function kp_frontpage_enable() {
  // Initialize system variables reqiured (terms used) by this modules.

  // Terms used to query projectprop (type taxrank genus) to fetch
  // crop information of a project.
  $taxrank_cv_id = chado_get_cv(array('name' => 'taxonomic_rank'))
    ->cv_id;

  $genus_term_id = chado_get_cvterm(['name' => 'genus', 'cv_id' => $taxrank_cv_id])
    ->cvterm_id;

  variable_set('kp_frontpage_genus', $genus_term_id);


  // Higlighed term
  $local_cv_id = chado_get_cv(array('name' => 'local'))
    ->cv_id;

  $highlighted_term_id = chado_get_cvterm(['name' => 'highlighted', 'cv_id' => $local_cv_id])
    ->cvterm_id;

  variable_set('kp_frontpage_highlighted', $highlighted_term_id);

  // Bundle information.
  $organization_logo_field = 'field_funding_organization_logos';
  $table  = 'field_data_' . $organization_logo_field;
  $sql = sprintf("SELECT bundle FROM %s LIMIT 1", $table);
  $bundle = chado_query($sql)
    ->fetchField();

  variable_set('kp_frontpage_logos_bundle', $bundle);
}

/**
 * Implements hook_install().
 */
function kp_frontpage_install() {
  // Register the content type.
  node_types_rebuild();
  $types = node_type_get_types();
  node_add_body_field($types['kp_frontpage_cms']);

  // Array to hold sections of KP Frontpage where content is rendered into.
  $opt_show_in = array(
    'news_updates'  => 'KP Frontpage News and Updates',
    // Social network right column.
    'news_events'   => 'KP Frontpage Upcoming Events',

  );

  // Add a content type field - used to target content to a particular section in the frontpage.
  $show_in = array(
    'field_name' => 'kp_frontpage_show_in',
    'label' => 'Show Content:',
    'type' => 'list_text',
    'settings' => array(
      'allowed_values' => $opt_show_in,
    ),
  );

  field_create_field($show_in);

  // Create instance of the field, show content in.
  $default_value = array_values($opt_show_in)[0];
  $i = array(
    'field_name' => 'kp_frontpage_show_in',
    'entity_type' => 'node',
    'bundle' => 'kp_frontpage_cms',
    'label' => 'Show Content:',
    'description' => 'Select section of the frontpage to show this content.',
    'required' => TRUE,
    'default_value' => array(
      0 => array('value' => $default_value)
    ),
    'widget' => array(
      'type' => 'options_select',
    ),
  );

  field_create_instance($i);

  // Add a content type field - to allow user to enter in url an item points to.
  $link_to = array(
    'field_name' => 'kp_frontpage_link_to',
    'label' => 'Link to Page:',
    'type' => 'text',
    'settings' => array(
      'max_length' => 400,
    ),
  );

  field_create_field($link_to);
  unset($i);
  $i = array(
    'field_name' => 'kp_frontpage_link_to',
    'entity_type' => 'node',
    'bundle' => 'kp_frontpage_cms',
    'label' => 'Link to Page:',
    'description' => 'Link this news/events to a page. Include http:// part of the address.',
    'required' => FALSE,
    'default_value' => 'http://',
    'widget' => array(
      'type' => 'textfield'
    ),
  );

  field_create_instance($i);

  // Add a content type field - upload new/events banner image.
  $banner = array(
    'field_name' => 'kp_frontpage_banner',
    'label' => 'News/Event Banner:',
    'type' => 'image',
    'settings' => array(
      'file_extensions' => 'png gif jpg jpeg gif',
    ),
  );

  field_create_field($banner);
  unset($i);
  $i = array(
    'field_name' => 'kp_frontpage_banner',
    'entity_type' => 'node',
    'bundle' => 'kp_frontpage_cms',
    'label' => 'Banner Image:',
    'description' => 'Main image of news or events',
    'required' => TRUE,
    'default_value' => '',
    'widget' => array(
      'type' => 'image'
    ),
  );

  field_create_instance($i);

  // Drupal magic adds unecessary fields - body and URL redirects field, take them out.
  // There is another one but we need it - Content Title.
  if ($body = field_info_instance('node', 'body', 'kp_frontpage_cms')) {
    field_delete_instance($body);
  }


  // Create materialized view used by visualizations in Data Available section.
  $schema = array (
    'table' => 'kp_frontpage_stats',
    'fields' => array (
      'count' => array (
        'type' => 'int',
      ),
      'type' => array (
        'type' => 'varchar',
        'length' => 50,
      ),
    ),
  );

  // Count phenotypes, genomic data and germplasm.
  $sql = "SELECT COUNT(stock_id) AS count, 'Germplasm' FROM {stock}
    WHERE type_id NOT IN (SELECT cvterm_id FROM {cvterm} WHERE LOWER(TRIM(name)) = 'dna') UNION";

  $sql .= ' ';
  $sql .= "SELECT CAST(reltuples AS int) AS count, 'Genotype Calls'
    FROM pg_class WHERE relname = 'genotype_call' UNION";

  $sql .= ' ';
  $sql .= "SELECT COUNT(combo) AS count, 'Phenotypes'
    FROM (SELECT plant_id || ':' || type_id AS combo FROM pheno_measurements GROUP BY plant_id, type_id) t";

  // Create the materialized view using tripal_add_mview().
  tripal_add_mview('kp_frontpage_stats', 'kp_frontpage', $schema, $sql, 'Saving stats for use on the frontpage.');

  // Populate the mview.
  $mview_id = tripal_get_mview_id('kp_frontpage_stats');
  tripal_populate_mview($mview_id);

  // Create cvterm entry used by promote to frontpage field.
  $cv = 'local';
  $cv_term = 'highlighted content';

  $term = array(
    'id' => $cv . ':' . $cv_term,
    'name' => $cv_term,
    'definition' => 'Promote experiment to frontpage',
    'cv_name' => $cv,
  );

  if (function_exists('chado_insert_cvterm')) {
    chado_insert_cvterm($term);
  }
  else {
    tripal_insert_cvterm($term);
  }
}


/**
 * Implements hook_uninstall().
 */
function kp_frontpage_uninstall() {
  // Content type
  $type = 'kp_frontpage_cms';

  $sql = "SELECT nid FROM {node} WHERE type = :type";
  $args = array(':type' => $type);
  $r = db_query($sql, $args)
    ->fetchAllKeyed(0, 0);

  $n_ids = array_keys($r);

  // Delete nodes.
  node_delete_multiple($n_ids);

  // Delete custom field show content in field.
  field_delete_field('kp_frontpage_show_in');

  // Delete content type.
  node_type_delete($type);
  field_purge_batch(500);

  // Delete materialized view.
  $mview_id = tripal_get_mview_id('kp_frontpage_stats');
  if (isset($mview_id) AND $mview_id > 0) {
    tripal_delete_mview($mview_id);
  }

  variable_del('kp_frontpage_genus');
  variable_del('kp_frontpage_highlighted');
  variable_del('kp_frontpage_logos_bundle');
}
